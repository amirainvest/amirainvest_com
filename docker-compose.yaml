version: "3.9"
services:

  simple:
    build:
      context: .
      dockerfile: Dockerfile

  amirainvest_com:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      ENVIRONMENT: "local"
      DEBUG: "true"
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"
    depends_on:
      ecs-local-endpoints:
        condition: service_started
      postgres:
        condition: service_healthy

      dynamo:
        condition: service_started
    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.3
    ports:
      - "5000:5000"

  # DO NOT CHANGE amirainvest_com_pycharm!! Not even the ENVIRONMENT.
  amirainvest_com_pycharm:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      ENVIRONMENT: "local"
      DEBUG: "true"
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"
    depends_on:
      ecs-local-endpoints:
        condition: service_started
      postgres:
        condition: service_healthy

    volumes:
      - .:/opt
    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.4
  # ^^^^^^^^ DO NOT CHANGE amirainvest_com_pycharm!! Not even the ENVIRONMENT.

  unit_test_amirainvest_com:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "pytest", "-m", "not integration_test" ]
    environment:
      ENVIRONMENT: "local"
      DEBUG: "true"
      AWS_DEFAULT_REGION: "us-east-1"
    depends_on:
      postgres:
        condition: service_healthy

    networks:
      local:

  integration_test_amirainvest_com:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "pytest", "-m", "integration_test" ]
    environment:
      ENVIRONMENT: "local"
      DEBUG: "true"
      AWS_DEFAULT_REGION: "us-east-1"
    depends_on:
      postgres:
        condition: service_healthy

    networks:
      local:
    volumes:
      - $HOME/.aws/:/home/default/.aws/

  backend_amirainvest_com:
    build:
      context: .
      dockerfile: ./Dockerfiles/backend_amirainvest_com.Dockerfile

    volumes:
      - ./local.env:/opt/local.env

    depends_on:
      postgres:
        condition: service_healthy
      ecs-local-endpoints:
        condition: service_started

    environment:
      ENVIRONMENT: "local"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"

    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.5

    ports:
      - "5000:5000"
  
  backend_vscode_debugger:
    build:
      context: .
      dockerfile: ./Dockerfiles/backend_amirainvest_com.Dockerfile
    command: [ "sh", "-c", "pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 ./src/backend_amirainvest_com/lib/backend_amirainvest_com/main.py" ]

    volumes:
      - ./local.env:/opt/local.env

    depends_on:
      postgres:
        condition: service_healthy
      ecs-local-endpoints:
        condition: service_started

    environment:
      ENVIRONMENT: "local"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"

    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.5

    ports:
      - "5000:5000"
      - "5678:5678"

  brokerage.lambda:
    build:
      context: .
      dockerfile: Dockerfiles/brokerage.lambda.Dockerfile
    environment:
      ENVIRONMENT: "local"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"
    depends_on:
      ecs-local-endpoints:
        condition: service_started
    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.6


  data_imports.lambda:
    build:
      context: .
      dockerfile: Dockerfiles/data_imports.lambda.Dockerfile
    environment:
      ENVIRONMENT: "local"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"
    depends_on:
      ecs-local-endpoints:
        condition: service_started
    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.6


  market_data.lambda:
    build:
      context: .
      dockerfile: Dockerfiles/market_data.lambda.Dockerfile
    environment:
      ENVIRONMENT: "local"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"
    depends_on:
      ecs-local-endpoints:
        condition: service_started
    networks:
      local:
      credentials_network:
        ipv4_address: 169.254.170.6


  ### Infrastructure containers
  ecs-local-endpoints:
    # The Amazon ECS Local Container Endpoints Docker Image
    image: amazon/amazon-ecs-local-container-endpoints
    volumes:
      - /var/run:/var/run
      - $HOME/.aws/:/home/.aws/
    environment:
      HOME: "/home"
      AWS_PROFILE: "default"
    networks:
      credentials_network:
        ipv4_address: 169.254.170.2

  postgres:
    image: postgres:10-alpine
    volumes:
      - type: volume
        source: common_postgres_data
        target: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      PGPORT: "5432"
      POSTGRES_DB: "test"
      POSTGRES_USER: "test"
      POSTGRES_PASSWORD: "test"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "test", "-U", "test" ]
      timeout: 40s
      interval: 2s
      retries: 20

    networks:
      - local

  dynamo:
    image: amazon/dynamodb-local
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal
    volumes:
      - dynamodb_data:/home/dynamodblocal
    ports:
      - "8000:8000"
    networks:
      - local

networks:
  local:
    driver: bridge
    name: local
  credentials_network:
    driver: bridge
    ipam:
      config:
        - subnet: 169.254.170.0/24
          gateway: 169.254.170.1

volumes:
  common_postgres_data:
  dynamodb_data:
